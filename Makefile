# Test GNU MAKE
$(if $(strip $(MAKE_VERSION)),,$(error ** Error ** : GNU Make is required for this Makefile !))

.ONESHELL:
SHELL := bash
.SHELLFLAGS := -Eeu -o pipefail $(if $(DEBUG),-x) -c
_SPACE = $(eval) $(eval)
_COMMA := ,

#####
# VARS
#####

VENV_DIR := venv

# add venv bin to PATH
export PATH := $(CURDIR)/$(VENV_DIR)/bin:$(PATH)

TESTS_TARGETS := docs build

# Files who need to be updated when build target is asked
BUILD_FILES := pyproject.toml
# Files who need to be updated when release target is asked
RELEASE_FILES := $(BUILD_FILES) CHANGELOG.md .VERSION
# GHA Workflows templates
GHA_TEMPLATES_DIR := .github/workflows
GHA_TEMPLATES := $(wildcard $(GHA_TEMPLATES_DIR)/*.yml)

#####
# Versions
#####

GIT_CHANGELOG_VERSION := 0.2.1
SVU_VERSION := v3.2.3
PYTHON_VERSIONS := $(shell cat .python-version | sed -e 's/.[0-9]\+$$//g')
BASE_PYTHON_VERSION := $(firstword $(PYTHON_VERSIONS))

-include $(VENV_DIR)/tox-env.mk

.SECONDARY: $(VENV_DIR)/tox-env.mk
$(VENV_DIR)/tox-env.mk: tox.ini
	TEST_TOX_ENV_LIST=$$($(VENV_DIR)/bin/tox -q -l 2> /dev/null | tr '\n' ' ')
	cat << EOF > $@
		TEST_TOX_TARGETS_PREFIX = test-tox
		TEST_TOX_ENV_LIST = $${TEST_TOX_ENV_LIST}
		TEST_TOX_TARGETS = \$$(addprefix \$$(TEST_TOX_TARGETS_PREFIX)-,\$$(TEST_TOX_ENV_LIST))
		TESTS_TARGETS += \$$(TEST_TOX_TARGETS)
	EOF

#####
# Targets
#####

.PHONY: all
all: test build

.PHONY: .FORCE
.FORCE:

.PHONY: test
test: $(TESTS_TARGETS)

.PHONY: $(TEST_TOX_TARGETS)
$(TEST_TOX_TARGETS): TOX_ENV = $(subst $(TEST_TOX_TARGETS_PREFIX)-,,$(@))
$(TEST_TOX_TARGETS): venv pyproject.toml github-workflows
	tox -e $(TOX_ENV)

##############
# Python env #
##############

.PHONY: venv
venv: $(VENV_DIR)/pyenv.done $(VENV_DIR)/bin/activate

.SECONDARY: $(VENV_DIR)/bin/activate 
$(VENV_DIR)/bin/activate: $(CURDIR)/dev-requirements.txt
	mkdir -p $(VENV_DIR)
	echo "*** Pyenv setup ***"
	eval "$$(pyenv init -)"
	echo "*** Python version in use ***"
	python --version
	if [ -n "${VIRTUAL_ENV:-}" ];then
		1>&2 echo "Error: VIRTUAL_ENV '${VIRTUAL_ENV:-}' already set. Quit this VIRTUAL_ENV before running tests)"
		exit 1
	fi
	pip install $(if $(DEBUG),,--quiet --quiet) virtualenv
	echo "*** Installing deps ***"
	virtualenv --quiet -p python3 $(VENV_DIR)
	VIRTUAL_ENV_DISABLE_PROMPT=true . $@
	pip install $(if $(DEBUG),,--quiet --quiet) -Ur $<
	touch $@

.SECONDARY: $(VENV_DIR)/pyenv.done
$(VENV_DIR)/pyenv.done: $(CURDIR)/.python-version
	mkdir -p $(VENV_DIR)
	echo "*** Checking presence of pyenv ***"
	if command -v  "pyenv" &> /dev/null ;then
		echo "*** Installing python version(s) ***"
		eval "$$(pyenv init -)"
		pyenv install -s
		echo "*** Python version in use ***"
		python --version
		touch $@
	else
		1>&2 echo "Error: pyenv is not installed"
		exit 1
	fi


###################
# Github workflows
###################
.PHONY: github-workflows
github-workflows: venv $(GHA_TEMPLATES)

#######
# Release
#######

.PHONY: norelease prerelease release
norelease : NEXT_TAG :=
prerelease: NEXT_TAG := $(shell docker run --rm -v $(CURDIR):/tmp --workdir /tmp ghcr.io/caarlos0/svu:$(SVU_VERSION) prerelease --prerelease "rc" --tag.prefix "")
release: NEXT_TAG := $(shell docker run --rm -v $(CURDIR):/tmp --workdir /tmp ghcr.io/caarlos0/svu:$(SVU_VERSION) next --tag.prefix "")
norelease prerelease release: LAST_TAG := $(shell git describe --tags --abbrev=0)
norelease prerelease release: release-gh publish

.PHONY: tag-release
.SECONDARY: tag-release
tag-release: commit-changes
	echo "*** Tagging ***"
	if [[ -z "$(NEXT_TAG)" ]];then
		1>&2 echo "No release asked"
	elif [[ "$(NEXT_TAG)" == "$(LAST_TAG)" ]];then
		1>&2 echo "Not tag generated by previous commits"
	else
		if git show-ref --tags "$(NEXT_TAG)" &>/dev/null;then
			1>&2 echo "tag '$(NEXT_TAG)' already exist, nothing to tag"
		else
			printf '%s\n' "Adding tag '$(NEXT_TAG)'"
			git tag -m "$(NEXT_TAG)" "$(NEXT_TAG)"
		fi
	fi

.PHONY: commit-changes
.SECONDARY: commit-changes
commit-changes: $(RELEASE_FILES)
	printf '%s\n' "*** Commiting changes ***"
	if ! git ls-files --error-unmatch $(RELEASE_FILES) > /dev/null 2>&1 || ! git diff --exit-code $(RELEASE_FILES) > /dev/null 2>&1;then
		git add $(RELEASE_FILES)
		$(MAKE) --no-print-directory check-git-clean
		if [[ -n "$(NEXT_TAG)" ]];then
			git commit -m"Release $(NEXT_TAG) [skip ci]"
		else
			git commit -m"CHANGELOG update [skip ci]"
		fi
		if [[ "$${CI}" == "True" ]];then
			echo "Pushing changes to repository"
			git push --follow-tags
		fi
	else
		1>&2 echo "Nothing changed..."
	fi

.PHONY: release-gh
.SECONDARY: release-gh
release-gh: tag-release
	echo "*** Creating GH release ***"
	if [[ -n "$(NEXT_TAG)" ]];then
		if [[ "$(NEXT_TAG)" != "$(LAST_TAG)" ]];then
			1>&2 echo "Commits triggered a new release: $(NEXT_TAG)"
			CHANGELOG=$$(docker run --rm -e CHANGELOG_TAG="$(NEXT_TAG)" -v $(CURDIR):/git rockandska/git-changelog:$(GIT_CHANGELOG_VERSION) -p)
			gh release create "$(NEXT_TAG)" -t "$(NEXT_TAG)" --notes "$${CHANGELOG}"
		else
			1>&2 echo "No commits triggered a new release"
		fi
	else
	 1>&2 echo "No release to create"
	fi


CHANGELOG.md: .FORCE
	printf '%s\n' "*** Updating $@ ***"
	if [[ -n "$(NEXT_TAG)" ]];then
		if [[ "$(NEXT_TAG)" != "$(LAST_TAG)" ]];then
			1>&2 echo "Adding version: '$(NEXT_TAG)' ) ***"
			docker run --rm -e CHANGELOG_TAG="$(NEXT_TAG)" -v $(CURDIR):/git rockandska/git-changelog:$(GIT_CHANGELOG_VERSION)
		else
			1>&2 echo "No commits triggered a new release"
		fi
	else
	 1>&2 echo "No release to create"
	fi

.SECONDARY: .VERSION
.VERSION: .FORCE
	printf '%s\n' "*** Updating $@ ***"
	if [[ -n "$(NEXT_TAG)" ]];then
		if [[ "$(NEXT_TAG)" != "$(LAST_TAG)" ]];then
			1>&2 echo "Adding version: '$(NEXT_TAG)' ) ***"
			echo "$(NEXT_TAG)" > $@
		else
			1>&2 echo "No commits triggered a new release"
		fi
	else
		1>&2 echo "No tag to update"
	fi

.PHONY: build
build: venv
	printf '%s\n' "*** Making build ***"
	$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) lock --check
	$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) build

.PHONY: publish
.SECONDARY: publish
publish: tag-release
	echo "*** Publishing release ***"
	if [[ -n "$(NEXT_TAG)" ]];then
		if [[ "$(NEXT_TAG)" != "$(LAST_TAG)" ]];then
			1>&2 echo "Publishing version: '$(NEXT_TAG)' ) ***"
			$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) publish
			:
		else
			1>&2 echo "No commits triggered a new release"
		fi
	else
		1>&2 echo "No tag to publish"
	fi

.PHONY: check-git-clean
.SECONDARY: check-git-clean
check-git-clean:
	if ! output=$$(git ls-files --others --exclude-standard 2>&1) || [ -n "$${output}" ];then
		1>&2 echo "Error: Git workingtree is not clean"
		exit 1
	fi

.PHONY: docs-serve
docs-serve: pyproject.toml venv
	$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) lock --check
	$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) install --only docs
	$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) run mkdocs serve

.PHONY: docs
docs: pyproject.toml venv
	printf '%s\n' "*** Making docs ***"
	$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) lock --check
	$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) install --only docs
	$(VENV_DIR)/bin/poetry $(if $(DEBUG),,--quiet) run mkdocs build


##############
# Templates
##############

.SECONDARY: tox.ini
tox.ini: tox.ini.j2 | venv
	echo "*** Generating $@ from $<... ***"
	$(VENV_DIR)/bin/jinja2 -o $@ $< -D base_python_version="$(BASE_PYTHON_VERSION)" -D python_versions="$(PYTHON_VERSIONS)"

.SECONDARY: pyproject.toml
pyproject.toml: pyproject.toml.j2 .VERSION | venv
	echo "*** Generating $@ from $<... ***"
	CURRENT_VERSION=$$(<".VERSION")
	$(VENV_DIR)/bin/jinja2 -o $@ $< -D version="$$CURRENT_VERSION" -D python_versions="$(PYTHON_VERSIONS)"

.SECONDARY: $(GHA_TEMPLATES)
$(GHA_TEMPLATES): tox.ini.j2 | venv
	echo "*** Generating $@ from $<... ***"
	mkdir -p $(@D)
	$(VENV_DIR)/bin/jinja2 -o $@ $< -D tests_targets="$(TESTS_TARGETS)" -D tox_targets_prefix="$(TEST_TOX_TARGETS_PREFIX)" -D base_python_version="$(BASE_PYTHON_VERSION)"

.PHONY: clean
clean:
	git clean -xdf

# invoking make V=1 will print everything
.PHONY: $(V).SILENT
$(V).SILENT:

