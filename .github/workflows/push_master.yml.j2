{% raw %}
name: On push master
on:
  push:
    branches:
      - 'master'
env:
  TERM: xterm-256color
  UBUNTU_IMAGE: &UBUNTU_IMAGE ubuntu-22.04
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
{% endraw %}

{% include 'pyenv_install.j2.inc' %}

{% include 'tests.j2.inc' %}

{% raw %}
  Release:
    needs: Tests
    runs-on: *UBUNTU_IMAGE
    steps:
      - uses: actions/checkout@v2

      - name: Restore pyenv cache
        id: pyenv-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ needs.pyenv.outputs.cache-path }}
          key: ${{ needs.pyenv.outputs.cache-key }}
          restore-keys: ${{ needs.pyenv.outputs.cache-restore-keys }}

      - name: Setup PYENV
        run: |
          echo "${{ needs.pyenv.outputs.cache-path }}/bin" >> "$GITHUB_PATH"
          echo "PYENV_ROOT=${{ needs.pyenv.outputs.cache-path }}" >> "$GITHUB_ENV"

      - name: Configure git
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Fetch tags
        run: |
          git fetch --prune --unshallow --tags

      - name: make release
        if: contains(github.event.head_commit.message, '[make release]')
        run: |
          eval "$(pyenv init -)"
          pyenv rehash
          make release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
          CI: True

      - name: make prerelease
        if: contains(github.event.head_commit.message, '[make prerelease]')
        run: |
          eval "$(pyenv init -)"
          pyenv rehash
          make prerelease
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
          CI: True

      - name: make unrelease
        if: |
          ! contains(github.event.head_commit.message, '[make prerelease]')
          && ! contains(github.event.head_commit.message, '[make release]')
        run: |
          eval "$(pyenv init -)"
          pyenv rehash
          make unrelease
        env:
          CI: True
{% endraw %}
